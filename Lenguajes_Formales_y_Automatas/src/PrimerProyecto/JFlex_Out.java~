/* The following code was generated by JFlex 1.6.1 */

package PrimerProyecto;
import static PrimerProyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/juan pablo/Documents/NetBeansProjects/Lenguajes_Formales_y_Automatas/src/PrimerProyecto/JFlex_out.flex</tt>
 */
class JFlex_Out {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\1\4\1\4\1\3\22\0\1\5\1\20\1\6"+
    "\1\0\1\21\1\0\1\22\1\12\1\14\1\15\1\2\1\2\1\23"+
    "\1\2\1\11\1\1\12\10\1\0\1\24\1\25\1\16\1\17\1\26"+
    "\1\0\22\7\1\53\1\52\6\7\1\13\1\0\1\13\1\0\1\27"+
    "\1\0\1\36\1\44\1\34\1\54\1\33\1\50\1\7\1\32\1\42"+
    "\2\7\1\37\1\41\1\47\1\35\1\31\1\7\1\43\1\45\1\40"+
    "\1\51\2\7\1\55\1\46\1\7\1\13\1\30\1\13\7\0\1\4"+
    "\33\0\1\0\22\0\1\0\12\0\1\0\u1f68\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\3\1\1\10\1\7\15\1\1\3\1\0"+
    "\1\11\5\0\1\7\1\6\1\12\1\0\1\13\17\0"+
    "\1\4\1\0\2\12\22\0\1\14\11\0\1\12\5\0"+
    "\1\13\40\0\2\13\30\0\1\14\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\56\0\212\0\270\0\346"+
    "\0\56\0\u0114\0\u0142\0\u0142\0\u0170\0\u019e\0\56\0\u01cc"+
    "\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c"+
    "\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\212\0\56"+
    "\0\u047e\0\270\0\u04ac\0\346\0\u04da\0\56\0\56\0\u0508"+
    "\0\u0536\0\56\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u02e0"+
    "\0\u07ba\0\u04ac\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e"+
    "\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0bae\0\u033c\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u0dd6\0\u0e04\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\56\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98"+
    "\0\u1ac6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\5\1\6\1\2"+
    "\1\7\1\2\1\10\3\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\1\25\1\2\1\26\1\27\3\2\1\30\1\31\1\2"+
    "\1\32\2\2\1\33\1\34\3\2\1\35\57\0\1\36"+
    "\57\0\1\37\1\0\1\37\1\40\3\41\16\0\1\37"+
    "\25\41\10\0\1\42\1\43\47\0\1\44\1\0\1\44"+
    "\1\0\3\45\1\40\15\0\1\44\25\45\16\0\1\46"+
    "\1\47\54\0\1\46\46\0\1\50\21\0\25\50\22\0"+
    "\1\46\51\0\1\46\7\0\1\51\46\0\1\52\65\0"+
    "\1\53\56\0\1\46\70\0\1\54\46\0\1\55\2\0"+
    "\1\56\61\0\1\46\55\0\1\57\1\60\1\52\1\0"+
    "\1\61\56\0\1\62\40\0\1\63\55\0\1\64\57\0"+
    "\1\65\13\0\1\66\53\0\1\67\43\0\1\70\20\0"+
    "\3\36\2\0\51\36\3\0\1\71\1\0\1\71\1\40"+
    "\3\41\16\0\1\71\25\41\10\0\1\72\50\0\1\73"+
    "\1\0\1\73\1\0\3\45\1\40\15\0\1\73\25\45"+
    "\7\0\1\50\1\74\16\0\1\75\1\0\25\50\31\0"+
    "\1\76\56\0\1\77\65\0\1\100\45\0\1\101\70\0"+
    "\1\102\53\0\1\103\57\0\1\104\64\0\1\46\4\0"+
    "\1\62\1\0\1\62\6\0\1\105\13\0\1\62\65\0"+
    "\1\106\55\0\1\107\60\0\1\110\61\0\1\111\53\0"+
    "\1\112\13\0\1\71\1\0\1\71\1\40\21\0\1\71"+
    "\30\0\1\73\1\0\1\73\4\0\1\40\15\0\1\73"+
    "\35\0\1\74\1\113\54\0\1\74\16\0\1\75\60\0"+
    "\1\114\61\0\1\115\66\0\1\116\43\0\1\117\53\0"+
    "\1\120\60\0\1\121\57\0\1\122\20\0\1\105\1\0"+
    "\1\105\1\123\3\0\1\124\6\0\1\125\6\0\1\105"+
    "\76\0\1\126\33\0\1\127\61\0\1\130\56\0\1\131"+
    "\54\0\1\116\32\0\1\132\76\0\1\52\63\0\1\133"+
    "\56\0\1\52\20\0\1\117\1\0\1\117\1\134\3\0"+
    "\1\135\15\0\1\117\30\0\1\136\1\0\1\136\22\0"+
    "\1\136\11\0\1\137\61\0\1\140\52\0\1\141\15\0"+
    "\1\123\1\0\1\123\1\142\3\143\16\0\1\123\25\143"+
    "\3\0\1\124\1\0\1\124\1\0\3\144\1\142\15\0"+
    "\1\124\25\144\7\0\1\145\21\0\25\145\43\0\1\146"+
    "\45\0\1\147\60\0\1\150\57\0\1\151\25\0\1\74"+
    "\105\0\1\152\15\0\6\134\1\153\47\134\12\135\1\154"+
    "\43\135\27\0\1\155\22\0\1\156\41\0\1\157\22\0"+
    "\1\142\1\0\1\142\10\0\1\160\1\161\1\160\1\0"+
    "\1\162\2\0\1\161\2\0\1\163\4\0\1\164\1\165"+
    "\16\0\1\166\3\0\1\167\1\0\1\167\1\142\3\143"+
    "\16\0\1\167\25\143\3\0\1\170\1\0\1\170\1\0"+
    "\3\144\1\142\15\0\1\170\25\144\3\0\1\142\1\0"+
    "\1\142\1\0\1\145\1\171\5\0\1\160\1\161\1\160"+
    "\1\0\1\162\2\0\1\161\1\0\1\172\1\163\4\145"+
    "\1\173\1\174\17\145\47\0\1\52\45\0\1\175\52\0"+
    "\1\176\63\0\1\177\42\0\1\200\26\0\3\134\1\153"+
    "\1\134\2\153\15\134\1\201\3\134\1\153\25\134\3\135"+
    "\1\154\1\135\1\154\4\135\1\154\11\135\1\202\3\135"+
    "\1\154\25\135\31\0\1\203\61\0\1\204\54\0\1\116"+
    "\37\0\1\205\42\0\1\206\1\0\1\206\1\207\3\0"+
    "\1\210\3\0\2\161\1\160\1\211\1\162\2\0\1\161"+
    "\2\0\1\212\4\0\1\164\1\165\16\0\1\166\22\0"+
    "\1\205\36\0\1\142\1\0\1\142\10\0\1\160\1\161"+
    "\1\160\1\0\1\162\2\0\1\161\2\0\1\213\4\0"+
    "\1\164\1\165\16\0\1\166\43\0\1\205\61\0\1\214"+
    "\43\0\1\164\23\0\1\167\1\0\1\167\1\142\21\0"+
    "\1\167\30\0\1\170\1\0\1\170\4\0\1\142\15\0"+
    "\1\170\30\0\1\142\1\0\1\142\2\0\1\171\1\215"+
    "\4\0\1\160\1\161\1\160\1\0\1\162\2\0\1\161"+
    "\2\0\1\163\4\0\1\164\1\165\16\0\1\166\3\0"+
    "\1\142\1\0\1\142\2\0\1\171\5\0\1\160\1\161"+
    "\1\160\1\0\1\162\2\0\1\161\1\0\1\172\1\163"+
    "\4\0\1\164\1\165\16\0\1\166\3\0\1\142\1\0"+
    "\1\142\1\0\1\145\1\171\5\0\1\160\1\161\1\160"+
    "\1\0\1\162\2\0\1\161\1\0\1\172\1\163\4\145"+
    "\1\173\1\174\4\145\1\216\12\145\3\0\1\142\1\0"+
    "\1\142\1\0\1\145\1\171\5\0\1\160\1\161\1\160"+
    "\1\0\1\162\2\0\1\161\1\0\1\172\1\163\4\145"+
    "\1\173\1\174\10\145\1\217\6\145\33\0\1\220\54\0"+
    "\1\52\60\0\1\146\54\0\1\221\56\0\1\114\73\0"+
    "\1\222\5\0\1\206\1\0\1\206\1\207\3\0\1\210"+
    "\3\0\1\160\1\161\1\160\1\211\1\162\2\0\1\161"+
    "\2\0\1\212\4\0\1\164\1\165\16\0\1\166\3\0"+
    "\1\206\1\0\1\206\1\207\3\0\1\210\6\0\1\211"+
    "\6\0\1\206\30\0\1\207\1\0\1\207\1\223\3\224"+
    "\16\0\1\207\25\224\3\0\1\210\1\0\1\210\1\0"+
    "\3\225\1\223\15\0\1\210\25\225\7\0\1\226\21\0"+
    "\25\226\3\0\1\206\1\0\1\206\1\207\3\0\1\210"+
    "\6\0\1\211\6\0\1\205\30\0\1\213\1\0\1\213"+
    "\1\207\3\0\1\210\3\0\1\160\1\161\1\160\1\211"+
    "\1\162\2\0\1\161\2\0\1\213\4\0\1\164\1\165"+
    "\16\0\1\166\54\0\1\205\11\0\1\227\50\0\1\213"+
    "\1\0\1\213\1\207\1\145\1\171\1\0\1\210\3\0"+
    "\1\160\1\161\1\160\1\211\1\162\2\0\1\161\1\0"+
    "\1\172\1\213\4\145\1\173\1\174\17\145\3\0\1\142"+
    "\1\0\1\142\1\0\1\145\1\171\5\0\1\160\1\161"+
    "\1\160\1\0\1\162\2\0\1\161\1\0\1\172\1\163"+
    "\4\145\1\173\1\174\15\145\1\216\1\145\41\0\1\230"+
    "\51\0\1\231\53\0\1\232\25\0\1\223\1\0\1\223"+
    "\7\0\1\233\12\0\1\223\30\0\1\234\1\0\1\234"+
    "\1\223\3\224\16\0\1\234\25\224\3\0\1\235\1\0"+
    "\1\235\1\0\3\225\1\223\15\0\1\235\25\225\3\0"+
    "\1\223\1\0\1\223\1\0\1\226\1\236\4\0\1\233"+
    "\11\0\1\237\1\223\25\226\3\0\1\142\1\0\1\142"+
    "\2\0\1\171\5\0\1\160\1\161\1\160\1\0\1\162"+
    "\2\0\1\161\2\0\1\163\4\0\1\164\1\165\16\0"+
    "\1\166\33\0\1\100\63\0\1\240\53\0\1\241\21\0"+
    "\1\234\1\0\1\234\1\223\21\0\1\234\30\0\1\235"+
    "\1\0\1\235\4\0\1\223\15\0\1\235\30\0\1\223"+
    "\1\0\1\223\2\0\1\236\1\242\3\0\1\233\12\0"+
    "\1\223\30\0\1\223\1\0\1\223\2\0\1\236\4\0"+
    "\1\233\11\0\1\237\1\223\56\0\1\243\57\0\1\157"+
    "\32\0\1\244\107\0\1\245\16\0\1\223\1\0\1\223"+
    "\2\0\1\236\4\0\1\233\12\0\1\223\64\0\1\246"+
    "\51\0\1\247\65\0\1\250\15\0\1\250\1\0\1\250"+
    "\6\0\1\251\13\0\1\250\30\0\1\251\1\0\1\251"+
    "\7\0\1\52\12\0\1\251\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\1\11\5\1\1\11"+
    "\17\1\1\0\1\11\5\0\2\11\1\1\1\0\1\11"+
    "\17\0\1\1\1\0\2\1\22\0\1\1\11\0\1\1"+
    "\5\0\1\1\40\0\2\1\30\0\1\11\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String Texto;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JFlex_Out(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Texto = yytext(); return ERROR;
            }
          case 13: break;
          case 2: 
            { Texto = yytext(); return OPERADOR;
            }
          case 14: break;
          case 3: 
            { /*Ignore*/
            }
          case 15: break;
          case 4: 
            { Texto = yytext(); return CONSTANTE;
            }
          case 16: break;
          case 5: 
            { Texto = yytext(); return INTERVALO;
            }
          case 17: break;
          case 6: 
            { Texto = yytext(); return ASIGNACION;
            }
          case 18: break;
          case 7: 
            { Texto = yytext(); return COMPARADOR;
            }
          case 19: break;
          case 8: 
            { Texto = yytext(); return SEPARACION;
            }
          case 20: break;
          case 9: 
            { Texto = yytext(); return CADENA;
            }
          case 21: break;
          case 10: 
            { Texto = yytext(); return VARIABLE;
            }
          case 22: break;
          case 11: 
            { Texto = yytext(); return PALABRA_RESERVADA;
            }
          case 23: break;
          case 12: 
            { Texto = yytext(); return SENTENCIA;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
