/* The following code was generated by JFlex 1.6.1 */

package PrimerProyecto;
import static PrimerProyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/juan pablo/Documents/NetBeansProjects/Lenguajes_Formales_y_Automatas/src/PrimerProyecto/MiniPHP.flex</tt>
 */
class MiniPHP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\5\1\112\1\112\1\5\22\0\1\63\1\13\1\3"+
    "\1\15\1\53\1\15\1\34\1\4\1\7\1\10\1\2\1\56\1\113"+
    "\1\56\1\62\1\1\1\60\11\61\1\14\1\55\1\16\1\11\1\12"+
    "\1\17\1\15\1\105\1\104\1\64\1\110\1\70\1\73\1\76\1\106"+
    "\1\67\1\54\1\66\1\74\1\54\1\71\1\65\1\100\1\102\1\101"+
    "\1\75\1\77\1\103\1\72\1\107\3\54\1\6\1\0\1\6\1\0"+
    "\1\22\1\0\1\23\1\35\1\26\1\41\1\32\1\42\1\47\1\21"+
    "\1\31\1\50\1\52\1\24\1\30\1\40\1\27\1\20\1\51\1\33"+
    "\1\36\1\25\1\43\1\45\1\44\1\46\1\37\1\54\1\6\1\57"+
    "\1\6\7\0\1\112\33\0\1\15\6\0\1\15\13\0\1\15\12\0"+
    "\1\15\u1f68\0\1\112\1\112\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\2\1\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\6\1\7\2\1\1\7\11\1\1\10\13\1"+
    "\1\7\1\11\1\2\1\1\2\12\1\11\1\1\1\3"+
    "\2\0\1\13\1\0\1\6\1\5\1\0\1\10\5\1"+
    "\1\10\15\1\1\14\20\1\1\15\12\1\2\16\1\0"+
    "\4\16\1\12\1\17\1\1\2\0\6\1\1\6\16\1"+
    "\1\12\25\1\1\20\4\1\2\16\1\0\1\16\1\0"+
    "\1\16\7\0\3\16\1\1\1\0\10\1\1\21\10\1"+
    "\1\10\10\1\1\22\17\1\1\16\1\0\2\16\7\0"+
    "\3\16\5\1\1\10\30\1\1\10\1\1\1\16\1\0"+
    "\1\16\1\0\1\23\4\0\1\23\2\16\2\1\1\10"+
    "\14\1\1\24\6\1\1\0\1\16\5\0\2\16\2\1"+
    "\1\0\13\1\1\25\2\1\1\10\3\1\1\26\1\1"+
    "\5\0\1\16\1\0\1\1\1\0\3\1\1\27\13\1"+
    "\1\10\4\0\1\1\1\0\12\1\1\0\1\30\3\0"+
    "\1\1\1\0\7\1\1\30\3\0\1\1\1\0\2\1"+
    "\1\31\4\1\3\0\1\1\1\0\4\1\2\0\1\25"+
    "\3\0\1\23\1\0\3\1\6\0\2\1\4\0\2\1"+
    "\7\0\2\1\1\31\4\0\1\1\3\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\114\0\344\0\u0130\0\114\0\114"+
    "\0\u017c\0\u01c8\0\u01c8\0\114\0\u0214\0\u0260\0\u02ac\0\u02f8"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558"+
    "\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8"+
    "\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\114"+
    "\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c"+
    "\0\344\0\114\0\u0130\0\114\0\114\0\u0c78\0\114\0\u0cc4"+
    "\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u02f8\0\u0e40\0\u0e8c\0\u0ed8"+
    "\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138"+
    "\0\u1184\0\u11d0\0\u02f8\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c"+
    "\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac"+
    "\0\u15f8\0\u1644\0\u1690\0\u02f8\0\u16dc\0\u1728\0\u1774\0\u17c0"+
    "\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u0b48\0\u1c34"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u02f8\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8"+
    "\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308"+
    "\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568"+
    "\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8"+
    "\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28"+
    "\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88"+
    "\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8"+
    "\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u02f8\0\u32c4\0\u3310\0\u335c"+
    "\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc"+
    "\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u02f8\0\u37d0"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30"+
    "\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90"+
    "\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0"+
    "\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150"+
    "\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0"+
    "\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610"+
    "\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u4824\0\u4870"+
    "\0\u48bc\0\u4908\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0"+
    "\0\114\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\u1b04\0\u4c4c\0\u4c98"+
    "\0\u4ce4\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8"+
    "\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u5074\0\u50c0\0\u510c\0\u02f8"+
    "\0\u5158\0\u51a4\0\u51f0\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c"+
    "\0\u53b8\0\u5404\0\u5450\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc"+
    "\0\u5618\0\u5664\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0\0\u582c"+
    "\0\u5878\0\u58c4\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c"+
    "\0\u5ad8\0\u5b24\0\u5b70\0\u5bbc\0\u02f8\0\u5c08\0\u5c54\0\u5ca0"+
    "\0\u5cec\0\u5d38\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00"+
    "\0\u5f4c\0\u5f98\0\u02f8\0\u5fe4\0\u6030\0\u607c\0\u60c8\0\u6114"+
    "\0\u6160\0\u61ac\0\u61f8\0\u6244\0\u6290\0\u62dc\0\u6328\0\u6374"+
    "\0\u63c0\0\u640c\0\u6458\0\u64a4\0\u64f0\0\u653c\0\u6588\0\u65d4"+
    "\0\u6620\0\u666c\0\u66b8\0\u6704\0\u6750\0\u679c\0\u67e8\0\u6834"+
    "\0\u6880\0\u68cc\0\u6918\0\u6964\0\u69b0\0\u69fc\0\u6a48\0\u6a94"+
    "\0\u6ae0\0\u6b2c\0\u6b78\0\u6bc4\0\u6c10\0\u6c5c\0\u6ca8\0\u6cf4"+
    "\0\u6d40\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70\0\u02f8\0\u6ebc\0\u6f08"+
    "\0\u6f54\0\u6fa0\0\u6fec\0\u7038\0\u7084\0\u70d0\0\u711c\0\u7168"+
    "\0\u71b4\0\u7200\0\u724c\0\u7298\0\u72e4\0\u02f8\0\u7330\0\u737c"+
    "\0\u73c8\0\u02f8\0\u7414\0\u7460\0\u74ac\0\u74f8\0\u7544\0\u7590"+
    "\0\u75dc\0\u7628\0\u7674\0\u76c0\0\u770c\0\u7758\0\u77a4\0\u77f0"+
    "\0\u783c\0\u7888\0\u78d4\0\u7920\0\u796c\0\u79b8\0\u7a04\0\u7a50"+
    "\0\u7a9c\0\u7ae8\0\u7b34\0\u7b80\0\u7bcc\0\114\0\u7c18\0\u7c64"+
    "\0\u7cb0\0\u7cfc\0\u7d48\0\u7d94\0\u7de0\0\u7e2c\0\u7e78\0\u7ec4"+
    "\0\u7f10\0\u7f5c\0\u7fa8\0\u7ff4\0\u8040\0\u808c\0\u80d8\0\u8124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\3\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\3\20\1\47"+
    "\1\20\1\50\1\51\1\52\1\53\1\54\1\55\1\7"+
    "\11\20\1\56\13\20\1\7\1\0\1\50\115\0\1\57"+
    "\1\60\113\0\1\61\1\62\1\0\105\61\1\0\1\61"+
    "\2\0\1\63\1\0\1\62\105\63\1\0\1\63\11\0"+
    "\1\64\1\65\112\0\1\64\113\0\1\64\5\0\1\66"+
    "\106\0\1\67\121\0\13\20\1\70\1\0\6\20\1\71"+
    "\7\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\2\20\1\72"+
    "\11\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\13\20\1\73\1\0\1\74\1\75\1\20\1\76\12\20"+
    "\1\0\1\20\7\0\25\20\23\0\11\20\1\77\2\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\1\20"+
    "\1\100\7\20\1\101\1\20\1\102\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\3\20\1\103\1\104\2\20"+
    "\1\105\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\13\20\1\75\1\0\1\106\15\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\2\20\1\107\13\20"+
    "\1\0\1\20\7\0\25\20\23\0\10\20\1\110\3\20"+
    "\1\0\1\20\1\111\1\20\1\112\1\20\1\113\10\20"+
    "\1\0\1\20\7\0\25\20\23\0\4\20\1\114\1\20"+
    "\1\115\1\20\1\116\3\20\1\0\3\20\1\117\4\20"+
    "\1\120\1\121\4\20\1\0\1\20\7\0\25\20\23\0"+
    "\12\20\1\122\1\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\37\0\1\64\77\0\7\20\1\123\3\20\1\124"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\5\20"+
    "\1\125\3\20\1\126\1\127\1\20\1\0\7\20\1\130"+
    "\6\20\1\0\1\20\7\0\25\20\23\0\11\20\1\131"+
    "\2\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\3\20\1\132\6\20\1\133\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\7\20\1\134\1\20\1\135"+
    "\1\136\1\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\7\20\1\137\1\20\1\140\2\20\1\0\6\20"+
    "\1\141\7\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\1\20\1\135\1\20\1\111\12\20\1\0\1\20"+
    "\7\0\25\20\23\0\1\20\1\142\12\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\3\20\1\143\10\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\7\20"+
    "\1\144\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\4\20\1\145\2\20\1\146\4\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\1\147\1\150\1\151"+
    "\1\152\10\153\1\0\16\153\1\0\1\153\7\0\12\153"+
    "\1\154\7\153\1\155\2\153\63\0\1\156\1\54\111\0"+
    "\1\64\114\0\2\156\1\157\111\0\2\54\1\157\111\0"+
    "\2\157\52\0\14\20\1\0\6\20\1\160\7\20\1\0"+
    "\1\20\7\0\25\20\3\0\5\57\1\0\104\57\1\0"+
    "\1\57\2\0\1\161\107\60\1\0\1\60\20\0\1\162"+
    "\113\0\7\20\1\163\1\20\1\164\2\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\1\165"+
    "\15\20\1\0\1\20\7\0\25\20\23\0\1\20\1\166"+
    "\12\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\13\20\1\167\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\1\20\1\170\14\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\4\20\1\171\11\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\1\20"+
    "\1\172\14\20\1\0\1\20\7\0\25\20\23\0\13\20"+
    "\1\173\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\10\20\1\135\3\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\3\20\1\174\5\20\1\175\2\20\1\0"+
    "\2\20\1\75\13\20\1\0\1\20\7\0\25\20\23\0"+
    "\4\20\1\176\1\177\6\20\1\0\1\20\1\200\14\20"+
    "\1\0\1\20\7\0\25\20\23\0\3\20\1\201\3\20"+
    "\1\202\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\3\20\1\203\12\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\13\20\1\204\2\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\1\20"+
    "\1\205\14\20\1\0\1\20\7\0\25\20\23\0\1\206"+
    "\13\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\1\20\1\207\14\20\1\0\1\20\7\0"+
    "\25\20\23\0\5\20\1\210\1\211\5\20\1\0\1\20"+
    "\1\212\14\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\1\20\1\213\14\20\1\0\1\20\7\0\25\20"+
    "\23\0\1\20\1\214\12\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\1\215\13\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\4\20\1\216"+
    "\11\20\1\0\1\20\7\0\25\20\23\0\3\20\1\217"+
    "\10\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\5\20\1\220\3\20\1\172\2\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\5\20\1\221\6\20\1\0"+
    "\14\20\1\222\1\20\1\0\1\20\7\0\25\20\23\0"+
    "\7\20\1\223\4\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\224\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\3\20\1\225\7\20\1\226"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\10\20"+
    "\1\227\3\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\5\20\1\230\6\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\11\20\1\231\2\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\12\20\1\232\1\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\10\20"+
    "\1\233\3\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\7\20\1\75\6\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\75\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\6\20\1\234\5\20"+
    "\1\0\5\20\1\235\10\20\1\0\1\20\7\0\25\20"+
    "\23\0\13\20\1\236\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\14\20\1\0\3\20\1\237\12\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\3\20\1\240"+
    "\12\20\1\0\1\20\7\0\25\20\23\0\11\20\1\241"+
    "\2\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\13\20\1\75\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\13\20\1\171\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\7\20\1\242\4\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\5\20\1\214\6\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\1\153\1\243"+
    "\1\244\11\153\1\0\16\153\1\0\1\153\1\0\1\245"+
    "\1\0\2\246\1\247\1\0\25\153\23\0\2\153\1\244"+
    "\2\153\1\250\6\153\1\0\16\153\1\0\1\153\1\0"+
    "\1\245\1\0\2\246\1\247\1\0\25\153\67\0\1\251"+
    "\3\0\1\252\2\0\1\253\1\0\1\254\1\255\1\0"+
    "\1\256\1\257\32\0\2\153\1\244\10\153\1\260\1\0"+
    "\16\153\1\0\1\153\1\0\1\245\1\0\2\246\1\247"+
    "\1\0\25\153\23\0\2\153\1\244\11\153\1\0\16\153"+
    "\1\0\1\153\1\0\1\245\1\0\2\246\1\247\1\0"+
    "\25\153\23\0\2\153\1\244\11\153\1\0\16\153\1\0"+
    "\1\153\1\0\1\245\1\0\2\246\1\247\1\0\10\153"+
    "\1\261\14\153\23\0\2\153\1\244\11\153\1\0\16\153"+
    "\1\0\1\153\1\0\1\245\1\0\2\246\1\247\1\0"+
    "\13\153\1\262\11\153\63\0\2\156\52\0\1\263\13\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\4\0\1\7"+
    "\1\161\107\60\1\0\1\60\21\0\1\264\112\0\5\20"+
    "\1\265\6\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\3\20\1\172\4\20\1\266\5\20"+
    "\1\0\1\20\7\0\25\20\23\0\4\20\1\267\7\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\3\20"+
    "\1\270\10\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\3\20\1\271\10\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\5\20\1\272\6\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\5\20\1\75\6\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\7\20"+
    "\1\133\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\11\20\1\172\2\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\10\20\1\75\3\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\4\20\1\273\7\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\6\20"+
    "\1\274\5\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\275\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\1\20\1\276\14\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\3\20"+
    "\1\135\12\20\1\0\1\20\7\0\25\20\23\0\5\20"+
    "\1\277\6\20\1\0\1\20\1\172\14\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\300\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\14\20"+
    "\1\301\1\20\1\0\1\20\7\0\25\20\23\0\4\20"+
    "\1\302\7\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\172\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\303\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\4\20\1\304\7\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\5\20"+
    "\1\305\6\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\306\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\7\20\1\75\4\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\5\20\1\307\6\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\11\20"+
    "\1\310\2\20\1\0\1\20\1\311\2\20\1\312\1\313"+
    "\1\20\1\43\6\20\1\0\1\20\7\0\25\20\23\0"+
    "\4\20\1\75\7\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\314\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\6\20\1\315"+
    "\7\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\6\20\1\316\7\20\1\0\1\20\7\0\25\20\23\0"+
    "\4\20\1\317\7\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\3\20\1\320\10\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\5\20\1\321\6\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\11\20\1\322"+
    "\2\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\1\323\13\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\2\20\1\324\3\20\1\325\5\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\5\20\1\326\6\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\4\20"+
    "\1\327\7\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\330\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\4\20\1\331\7\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\3\20\1\332\10\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\12\20"+
    "\1\333\1\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\3\20\1\334\10\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\6\20\1\335\5\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\4\20\1\336\7\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\1\120\15\20\1\0\1\20\7\0\25\20\23\0"+
    "\1\337\1\153\1\244\11\153\1\0\16\153\1\0\1\153"+
    "\1\0\1\245\1\0\2\246\1\247\1\0\25\153\25\0"+
    "\1\244\6\0\1\340\24\0\1\245\1\0\2\246\1\247"+
    "\111\0\1\341\1\246\63\0\1\340\24\0\1\245\1\0"+
    "\2\246\1\341\111\0\2\341\52\0\2\153\1\244\2\153"+
    "\1\342\6\153\1\0\16\153\1\0\1\153\1\0\1\245"+
    "\1\0\2\246\1\247\1\0\25\153\70\0\1\343\117\0"+
    "\1\344\111\0\1\345\114\0\1\346\113\0\1\347\110\0"+
    "\1\350\116\0\1\351\43\0\2\153\1\244\11\153\1\0"+
    "\12\153\1\352\3\153\1\0\1\153\1\0\1\245\1\0"+
    "\2\246\1\247\1\0\25\153\23\0\2\153\1\244\11\153"+
    "\1\0\16\153\1\0\1\153\1\0\1\245\1\0\2\246"+
    "\1\247\1\0\1\153\1\353\23\153\23\0\2\153\1\244"+
    "\11\153\1\0\16\153\1\0\1\153\1\0\1\245\1\0"+
    "\2\246\1\247\1\0\13\153\1\354\11\153\23\0\12\20"+
    "\1\355\1\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\1\67\113\0\12\20\1\356\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\3\20\1\357\10\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\11\20"+
    "\1\360\2\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\4\20\1\361\7\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\2\20\1\362\13\20"+
    "\1\0\1\20\7\0\25\20\23\0\13\20\1\363\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\3\20\1\364"+
    "\10\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\1\20\1\75\12\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\14\20\1\0\1\20\1\75\14\20\1\0"+
    "\1\20\7\0\25\20\23\0\11\20\1\365\2\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\6\20\1\172"+
    "\5\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\4\20\1\366\7\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\367\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\13\20\1\370\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\6\20"+
    "\1\371\7\20\1\0\1\20\7\0\25\20\23\0\3\20"+
    "\1\372\6\20\1\373\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\11\20\1\310\2\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\2\20"+
    "\1\75\13\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\5\20\1\113\10\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\7\20\1\374\6\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\375\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\7\20\1\137\4\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\3\20\1\376\12\20\1\0\1\20\7\0\25\20"+
    "\23\0\13\20\1\377\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\11\20\1\u0100\2\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\15\20\1\275"+
    "\1\0\1\20\7\0\25\20\23\0\11\20\1\u0101\2\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\3\20\1\u0102\12\20\1\0\1\20\7\0\25\20"+
    "\23\0\4\20\1\u0103\7\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\u0104\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\7\20\1\u0105\4\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\6\20"+
    "\1\u0106\5\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\4\20\1\75\11\20\1\0\1\20"+
    "\7\0\25\20\23\0\14\20\1\0\1\20\1\u0107\14\20"+
    "\1\0\1\20\7\0\25\20\23\0\3\20\1\u0108\10\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\6\20\1\u0109\7\20\1\0\1\20\7\0\25\20"+
    "\23\0\3\20\1\u010a\10\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\4\20\1\u010b\7\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\5\20\1\u010c\6\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\12\20"+
    "\1\134\1\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\2\153\1\u010d\11\153\1\0\16\153\1\0\1\153"+
    "\1\0\1\245\1\0\2\246\1\247\1\0\25\153\43\0"+
    "\1\u010e\104\0\1\340\24\0\1\245\1\0\2\246\1\247"+
    "\51\0\1\u010f\1\153\1\244\11\153\1\0\16\153\1\0"+
    "\1\153\1\0\1\245\1\0\2\246\1\247\1\0\25\153"+
    "\70\0\1\u0110\120\0\1\u0111\115\0\1\u0112\114\0\1\u0113"+
    "\3\0\1\u0114\111\0\1\u0111\111\0\1\347\120\0\1\u0115"+
    "\31\0\2\153\1\244\3\153\1\u0116\5\153\1\0\10\153"+
    "\1\u0116\5\153\1\0\1\153\1\0\1\245\1\0\2\246"+
    "\1\247\1\0\25\153\23\0\2\153\1\244\11\153\1\0"+
    "\16\153\1\0\1\153\1\0\1\245\1\0\2\246\1\247"+
    "\1\0\20\153\1\u0117\4\153\23\0\2\153\1\244\11\153"+
    "\1\0\16\153\1\0\1\153\1\0\1\245\1\0\2\246"+
    "\1\247\1\0\14\153\1\u0118\10\153\23\0\13\20\1\u0119"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\6\20"+
    "\1\u011a\5\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\5\20\1\135\6\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\6\20\1\u011b\5\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\5\20\1\u011c\6\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\2\20"+
    "\1\u011d\2\20\1\u011e\6\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\3\20\1\300\10\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\1\u011f"+
    "\15\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\3\20\1\u0120\12\20\1\0\1\20\7\0\25\20\23\0"+
    "\2\20\1\u0121\11\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\10\20\1\u0122\3\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\5\20\1\u0123"+
    "\10\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\4\20\1\u0124\11\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\3\20\1\u0125\12\20\1\0\1\20\7\0"+
    "\25\20\23\0\3\20\1\u0126\10\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\11\20\1\u0127\2\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\6\20\1\234"+
    "\5\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\4\20\1\276\11\20\1\0\1\20\7\0"+
    "\25\20\23\0\14\20\1\0\3\20\1\u0128\12\20\1\0"+
    "\1\20\7\0\25\20\23\0\13\20\1\u0129\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\6\20\1\75\5\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\12\20\1\75\3\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\u012a\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\4\20\1\u012b\7\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\7\20\1\u012c\4\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\1\20"+
    "\1\275\12\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\1\u0123\13\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\13\20\1\135\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\4\20\1\172\7\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\6\20\1\u012d\5\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\4\20"+
    "\1\307\7\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\11\20\1\u012e\2\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\25\0\1\244\6\0\1\340\1\u012f\23\0"+
    "\1\245\1\0\2\246\1\247\56\0\1\341\106\0\2\153"+
    "\1\u0130\11\153\1\0\16\153\1\0\1\153\1\0\1\245"+
    "\1\0\2\246\1\247\1\0\25\153\71\0\1\u0131\115\0"+
    "\1\u0132\120\0\1\u0133\110\0\1\u0134\124\0\1\u0135\30\0"+
    "\2\153\1\244\11\153\1\0\16\153\1\0\1\153\1\0"+
    "\1\245\1\0\2\246\1\247\1\0\21\153\1\u0136\3\153"+
    "\23\0\2\153\1\u0137\11\153\1\0\16\153\1\0\1\153"+
    "\1\0\1\245\1\0\2\246\1\247\1\0\25\153\23\0"+
    "\14\20\1\0\12\20\1\u0138\3\20\1\0\1\20\7\0"+
    "\25\20\23\0\5\20\1\u0139\6\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\16\20\1\0"+
    "\1\20\6\0\1\u013a\25\20\23\0\2\20\1\u013b\11\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\1\u013c"+
    "\13\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\7\20\1\u013d\4\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\4\20\1\135\7\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\6\20\1\u013e"+
    "\7\20\1\0\1\20\7\0\25\20\23\0\6\20\1\u013f"+
    "\3\20\1\u0140\1\u0141\1\0\5\20\1\u0142\6\20\1\u0143"+
    "\1\20\1\0\1\20\7\0\25\20\23\0\12\20\1\u0144"+
    "\1\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\3\20\1\u0145\10\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\u0146\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\6\20\1\u0147\5\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\4\20\1\u0148\11\20\1\0\1\20\7\0\25\20\23\0"+
    "\5\20\1\177\6\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\u0149\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\14\20\1\0\11\20\1\u014a"+
    "\4\20\1\0\1\20\7\0\25\20\23\0\12\20\1\u014b"+
    "\1\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\15\20\1\u014c\1\0\1\20\7\0\25\20"+
    "\23\0\1\20\1\u014d\12\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\7\20\1\u014e\4\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\36\0\1\u014f\102\0\1\244"+
    "\6\0\1\340\1\0\1\u0150\22\0\1\245\1\0\2\246"+
    "\1\247\120\0\1\u0151\121\0\1\u0111\105\0\1\u0152\114\0"+
    "\1\u0153\113\0\1\350\43\0\2\153\1\244\11\153\1\0"+
    "\16\153\1\0\1\153\1\0\1\245\1\0\2\246\1\247"+
    "\1\0\10\153\1\u0154\14\153\25\0\1\244\6\0\1\340"+
    "\24\0\1\245\1\0\2\246\1\247\16\0\1\u0155\32\0"+
    "\4\20\1\u0156\7\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\12\20\1\327\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\45\0\1\u0157\71\0\6\20\1\u0158"+
    "\5\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\7\20\1\u0159\4\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\14\20\1\0\1\20\1\u015a\14\20\1\0"+
    "\1\20\7\0\25\20\23\0\12\20\1\u015b\1\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\7\20\1\u015c"+
    "\4\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\13\20\1\u015d\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\u015e\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\12\20\1\u015f\1\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\6\20"+
    "\1\u0160\7\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\3\20\1\u0161\12\20\1\0\1\20\7\0\25\20"+
    "\23\0\6\20\1\135\5\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\2\20\1\u0162\11\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\12\20\1\u0148\1\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\7\20"+
    "\1\u0163\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\2\20\1\u0164\11\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\10\20\1\u0165\3\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\10\20\1\u0166\3\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\11\20"+
    "\1\135\2\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\3\20\1\u0167\12\20\1\0\1\20"+
    "\7\0\25\20\36\0\1\u0168\112\0\1\u0169\151\0\1\u0111"+
    "\110\0\1\u016a\127\0\1\u0111\32\0\2\153\1\244\11\153"+
    "\1\0\16\153\1\0\1\153\1\0\1\245\1\0\2\246"+
    "\1\247\1\0\11\153\1\u0116\13\153\110\0\1\u016b\26\0"+
    "\7\20\1\u016c\4\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\46\0\1\u016d\70\0\7\20\1\u016e\4\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\1\75\13\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\12\20"+
    "\1\u016f\1\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\3\20\1\u0170\12\20\1\0\1\20"+
    "\7\0\25\20\23\0\13\20\1\u0171\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\3\20\1\u0172\10\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\5\20\1\u0173"+
    "\6\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\12\20\1\u0174\1\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\5\20\1\276\6\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\7\20\1\u0175\4\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\5\20\1\75\10\20\1\0\1\20\7\0\25\20\23\0"+
    "\7\20\1\u0176\4\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\4\20\1\324\7\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\12\20\1\u0177\1\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\10\0\1\u0178\12\0"+
    "\2\u0179\1\20\11\u0179\1\0\16\u0179\1\0\1\u0179\2\0"+
    "\1\u0178\3\0\1\u0178\25\u0179\1\u0178\31\0\1\u017a\122\0"+
    "\1\u017b\146\0\1\u0111\131\0\1\u017c\24\0\14\20\1\0"+
    "\1\u017d\15\20\1\0\1\20\7\0\25\20\43\0\1\u017e"+
    "\73\0\10\20\1\u017f\3\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\4\20\1\204\7\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\14\20\1\0\3\20"+
    "\1\u0180\12\20\1\0\1\20\7\0\25\20\23\0\7\20"+
    "\1\u0181\4\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\4\20\1\u0182\7\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\6\20\1\u0183\5\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\13\20\1\u0184\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\3\20\1\u0185\12\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\3\20\1\u0145\12\20\1\0\1\20\7\0"+
    "\25\20\23\0\14\20\1\0\3\20\1\172\12\20\1\0"+
    "\1\20\7\0\25\20\10\0\1\u0178\12\0\2\u0186\1\0"+
    "\11\u0186\1\0\16\u0186\1\0\1\u0186\2\0\1\u0178\3\0"+
    "\1\u0178\25\u0186\1\u0178\22\0\2\u0179\1\20\11\u0179\1\0"+
    "\16\u0179\1\0\1\u0179\7\0\25\u0179\36\0\1\u0187\100\0"+
    "\1\u0188\115\0\1\u0189\111\0\3\20\1\u018a\10\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\31\0\1\u018b\105\0"+
    "\1\u018c\13\20\1\0\16\20\1\0\1\20\7\0\25\20"+
    "\23\0\12\20\1\u018d\1\20\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\23\0\13\20\1\u018e\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\2\20\1\u018f\11\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\1\20\1\u0190"+
    "\12\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\2\20\1\u0191\13\20\1\0\1\20\7\0"+
    "\25\20\23\0\6\20\1\u0192\5\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\2\u0186\1\0\11\u0186\1\0"+
    "\16\u0186\1\0\1\u0186\7\0\25\u0186\33\0\1\u0193\112\0"+
    "\1\u0194\164\0\1\u0195\33\0\4\20\1\u0196\7\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\30\0\1\u0197\106\0"+
    "\11\20\1\u0198\2\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\6\20\1\u0199\5\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\12\20\1\u019a\1\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\2\20\1\u019b"+
    "\11\20\1\0\16\20\1\0\1\20\7\0\25\20\10\0"+
    "\1\u019c\1\0\1\u019d\10\0\14\20\1\0\16\20\1\0"+
    "\1\20\2\0\1\u019c\3\0\1\u019c\25\20\1\u019c\22\0"+
    "\12\20\1\u019e\1\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\41\0\1\u019f\115\0\1\u01a0\140\0\1\u01a1\46\0"+
    "\14\20\1\0\1\20\1\u01a2\14\20\1\0\1\20\7\0"+
    "\25\20\34\0\1\u01a3\102\0\4\20\1\u01a4\7\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\5\20\1\u018e"+
    "\6\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\1\20\1\u01a5\14\20\1\0\1\20\7\0"+
    "\25\20\23\0\3\20\1\u01a6\10\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\10\0\1\u019c\1\0\1\u019d\47\0"+
    "\1\u019c\3\0\1\u019c\25\0\1\u019c\5\0\1\u01a7\1\u01a8"+
    "\1\u019d\45\0\1\u01a9\3\0\1\u019d\3\0\1\u019d\25\0"+
    "\1\u019d\51\0\1\u0111\102\0\1\u01aa\152\0\1\u01ab\45\0"+
    "\1\u01ac\104\0\12\20\1\143\1\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\23\0\6\20\1\u01ad\5\20\1\0"+
    "\16\20\1\0\1\20\7\0\25\20\23\0\14\20\1\0"+
    "\1\20\1\u01ae\14\20\1\0\1\20\7\0\25\20\5\0"+
    "\1\u01a7\1\u01af\1\0\105\u01a7\1\0\1\u01a7\2\0\1\u01a8"+
    "\1\0\1\u01af\105\u01a8\1\0\1\u01a8\20\0\2\u01b0\1\0"+
    "\11\u01b0\1\0\16\u01b0\1\0\1\u01b0\7\0\25\u01b0\35\0"+
    "\1\u01b1\160\0\1\u01b2\54\0\1\u0178\73\0\3\20\1\u01b3"+
    "\10\20\1\0\16\20\1\0\1\20\7\0\25\20\23\0"+
    "\14\20\1\0\1\20\1\u01b4\14\20\1\0\1\20\7\0"+
    "\25\20\10\0\1\u01af\2\0\1\u01b5\46\0\1\u01af\3\0"+
    "\1\u01af\25\0\1\u01af\7\0\1\u01af\2\0\1\u01b5\7\0"+
    "\2\u01b0\1\u01b6\11\u01b0\1\0\16\u01b0\1\0\1\u01b0\1\0"+
    "\1\u01b7\1\u01af\2\u01b8\1\u01b9\1\u01af\25\u01b0\1\u01af\24\0"+
    "\1\u01ba\113\0\1\u01bb\111\0\1\u01bc\13\20\1\0\16\20"+
    "\1\0\1\20\7\0\25\20\23\0\7\20\1\u01bd\4\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\60\0\1\u01be"+
    "\43\0\1\u01af\2\0\1\u01b5\11\0\1\u01b6\6\0\1\u01bf"+
    "\24\0\1\u01b7\1\u01af\2\u01b8\1\u01b9\1\u01af\25\0\1\u01af"+
    "\62\0\1\u01c0\1\u01b8\37\0\1\u01af\2\0\1\u01b5\20\0"+
    "\1\u01bf\24\0\1\u01b7\1\u01af\2\u01b8\1\u01c0\1\u01af\25\0"+
    "\1\u01af\62\0\2\u01c0\53\0\1\u01c1\202\0\1\u01c2\23\0"+
    "\12\20\1\u01c3\1\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\23\0\6\20\1\u018e\5\20\1\0\16\20\1\0"+
    "\1\20\7\0\25\20\43\0\1\u01c4\60\0\1\u01af\2\0"+
    "\1\u01b5\20\0\1\u01bf\24\0\1\u01b7\1\u01af\2\u01b8\1\u01b9"+
    "\1\u01af\25\0\1\u01af\34\0\1\u01c5\166\0\1\u01c6\26\0"+
    "\2\20\1\u01c7\11\20\1\0\16\20\1\0\1\20\7\0"+
    "\25\20\30\0\1\u01c0\111\0\1\u01c8\167\0\1\u01c9\34\0"+
    "\14\20\1\0\1\20\1\u01ca\14\20\1\0\1\20\7\0"+
    "\25\20\44\0\1\u01cb\157\0\1\u0111\26\0\5\20\1\u01cc"+
    "\6\20\1\0\16\20\1\0\1\20\7\0\25\20\35\0"+
    "\1\u01cd\101\0\13\20\1\u01ce\1\0\16\20\1\0\1\20"+
    "\7\0\25\20\36\0\1\u0111\100\0\11\20\1\u01cf\2\20"+
    "\1\0\16\20\1\0\1\20\7\0\25\20\23\0\14\20"+
    "\1\0\3\20\1\u01d0\12\20\1\0\1\20\7\0\25\20"+
    "\23\0\14\20\1\0\12\20\1\u018e\3\20\1\0\1\20"+
    "\7\0\25\20\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\2\1\2\11\3\1\1\11"+
    "\33\1\1\11\7\1\2\0\1\11\1\0\2\11\1\0"+
    "\1\11\61\1\1\0\7\1\2\0\62\1\1\0\1\1"+
    "\1\0\1\1\7\0\4\1\1\0\53\1\1\0\2\1"+
    "\7\0\44\1\1\0\1\1\1\0\1\11\4\0\31\1"+
    "\1\0\1\1\5\0\4\1\1\0\24\1\5\0\1\1"+
    "\1\0\1\1\1\0\20\1\4\0\1\1\1\0\12\1"+
    "\1\0\1\1\3\0\1\1\1\0\10\1\3\0\1\1"+
    "\1\0\7\1\3\0\1\1\1\0\4\1\2\0\1\1"+
    "\3\0\1\1\1\0\3\1\6\0\2\1\4\0\2\1"+
    "\7\0\2\1\1\11\4\0\1\1\3\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String Texto;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MiniPHP(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Texto = yytext(); return ERROR;
            }
          case 26: break;
          case 2: 
            { Texto = yytext(); return OP_ARITMETICO;
            }
          case 27: break;
          case 3: 
            { /*Ignore*/
            }
          case 28: break;
          case 4: 
            { Texto = yytext(); return INTERVALO;
            }
          case 29: break;
          case 5: 
            { Texto = yytext(); return ASIGNACION;
            }
          case 30: break;
          case 6: 
            { Texto = yytext(); return OP_LOGICOS;
            }
          case 31: break;
          case 7: 
            { Texto = yytext(); return SIGNO;
            }
          case 32: break;
          case 8: 
            { Texto = yytext(); return P_RESERVADA;
            }
          case 33: break;
          case 9: 
            { Texto = yytext(); return SEPARACION;
            }
          case 34: break;
          case 10: 
            { Texto = yytext(); return TI_ENTERO;
            }
          case 35: break;
          case 11: 
            { Texto = yytext(); return CADENA;
            }
          case 36: break;
          case 12: 
            { Texto = yytext(); return IF;
            }
          case 37: break;
          case 13: 
            { Texto = yytext(); return WHILE;
            }
          case 38: break;
          case 14: 
            { Texto = yytext(); return VARIABLE;
            }
          case 39: break;
          case 15: 
            { Texto = yytext(); return TI_REALES;
            }
          case 40: break;
          case 16: 
            { Texto = yytext(); return FOR;
            }
          case 41: break;
          case 17: 
            { Texto = yytext(); return SWITCH;
            }
          case 42: break;
          case 18: 
            { Texto = yytext(); return TI_LOGICO;
            }
          case 43: break;
          case 19: 
            { Texto = yytext(); return V_PREDEFINIDAS;
            }
          case 44: break;
          case 20: 
            { Texto = yytext(); return RETURN;
            }
          case 45: break;
          case 21: 
            { Texto = yytext(); return INCLUDE;
            }
          case 46: break;
          case 22: 
            { Texto = yytext(); return FOREACH;
            }
          case 47: break;
          case 23: 
            { Texto = yytext(); return CONTINUE;
            }
          case 48: break;
          case 24: 
            { Texto = yytext(); return FUNCIONES;
            }
          case 49: break;
          case 25: 
            { Texto = yytext(); return P_RESERVADA_DB;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
